<?php
namespace app\index\controller;
use think\Db;
use think\Controller;
use app\index\controller\User;
use app\admin\controller\index as adminIndex;
use think\Config;
use think\Loader;
//use think\response\View;
use think\Url;
use think\Request;
use app\index\model\Prizes;//导入model类
use think\View;
use think\Validate;
use think\captcha;
class Index extends Controller
{
	public function _initialize()
	{
		//echo '11';
		//echo '<br>';
		parent::_initialize(); // TODO: Change the autogenerated stub
	}
	
	public function _empty(){
		return 'default';
	}
	public function moban(){
		#继承系统控制器
		//return $this->fetch();
		//使用助手函数
		//return view();
		
		//使用view 类 不建议哦
		/*$view = new View();
		return $view->fetch();*/
		
		/*$name = 'mxw';
		$this->assign('name',$name);
		return view();*/
		
		/*$name = 'mxw';
		return $this->fetch('',['name'=>$name]);*/
		
		//指定加载页面
		return $this->fetch('a');
		//return $this->fetch(参数1,参数2,参数3,参数4);
		//参数1 字符串 模板名称
		//参数2 数组 模板赋值
		//参数3 数组 模板替换 (替换常量) ['__HOME__'=>'/static/....']
		
	}
	
	public function index()
    {
    	#生成URL
    	echo url('index/index/index');
		echo '<br>';
		echo url('index/index/test');
		echo '<br>';
		#带参数
		echo Url::build('index/index/test',['id'=>1]);
		echo '<br>';
		#带域名
		echo Url::build('index/index/test@wx',['id'=>1]);//http://wx.tp5.com/test/id/1.html
		echo '<br>';
		#加上入口
		Url::root('index.php');
		echo Url::build('index/index/test',['id'=>1]);//http://wx.tp5.com/test/id/1.html
		echo '<br>';
    	echo 'hello world';
		#数据库操作
		$lists = Db::table('snake_user')->select();
		print_r($lists);
		$this->assign('lists',$lists);
		
		return view();
        //return '<style type="text/css">*{ padding: 0; margin: 0; } .think_default_text{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style="padding: 24px 48px;"> <h1>:)</h1><p> ThinkPHP V5<br/><span style="font-size:30px">十年磨一剑 - 为API开发设计的高性能框架</span></p><span style="font-size:22px;">[ V5.0 版本由 <a href="http://www.qiniu.com" target="qiniu">七牛云</a> 独家赞助发布 ]</span></div><script type="text/javascript" src="https://tajs.qq.com/stats?sId=9347272" charset="UTF-8"></script><script type="text/javascript" src="https://e.topthink.com/Public/static/client.js"></script><think id="ad_bd568ce7058a1091"></think>';
    }
    
    public function diaoyong(){
    	#调用当前模块的控制器
    	$model = new \app\index\controller\User;
		//echo  $model->index();
		echo $model->test();
		echo '<hr>';
		$model = new User();
		echo $model->test();
		echo '<hr>';
		$model = Controller('user');
		echo $model->test();
	}
	
	public function diaoyong2(){
		$model = new \app\admin\controller\index;
		echo $model->index();
		echo "<hr>";
		$model = new adminIndex();
		echo $model->index();
		echo "<hr>";
		//使用系统方法
		$model = controller('admin/Index');
		echo $model->index();
	}
	public function test(){
		echo $this->diaoyong();
		echo "<hr>";
		echo self::diaoyong();
		echo "<hr>";
		echo Index::diaoyong();//当前控制器
		//使用系统方法
		echo "<hr>";
		echo action('diaoyong');
		echo "<hr>";
		//其他控制下面的方法
		echo action('User/test2');
		echo "<hr>";
		//调用后台模块方法
		$model = new \app\admin\controller\index;
		echo $model->index();
		
		echo "<hr>";
		echo action('admin/index/index');
		//echo PHP_SAPI;
	}
	public function getConfig(){
		//系统方法
		//var_dump(config('author'));
		//var_dump( \think\Config::get('author'));
		//echo config('mama','123123');
		echo \think\Config::get('mama');
		//先引用系统类
		echo Config::get('mama');
		config('name','mxw');
		echo Config::get('name');
	}
	public function course(){
		dump(input('id'));
		return intval(input('id'));
	}
	public function time(){
		return input('year').input('month');
	}
	public function dongtai(){
		return input('a').input('b');
	}
	public function test1(){
		return input('a').input('b').time();
	}
	public function type(){
		return '我是测试的';
	}
	
	public function rqt()
	{
		//$request = request();
		$request = Request::instance();
		//dump($request);
		dump($request->domain());//获取域名
		dump($request->url());//获取URL(不包含域名)
		dump($request->pathinfo());//
		dump($request->path());//
		dump($request->ext());//
		/*
		 * string(18) "http://www.tp5.com"

string(21) "/index/index/rqt.html"

string(20) "index/index/rqt.html"

string(15) "index/index/rqt"

string(4) "html"

		 * */
	}
	//实例化Request 类
	public function rqt2(Request $request){
		//dump($request);
		dump($request->controller());//获取控制器
		dump($request->isAjax());
		dump($request->method());
		dump($request->ip());
		dump($request->param());
	}
	public function a(){
		return view();
	}
	#获取变量
	public function vars(Request $request){
		dump($request->has('id','get'));//http://www.tp5.com/index/index/vars?id=1  ?这种形式才可以
		dump(input('?get.id'));//http://www.tp5.com/index/index/vars?id=1  ?这种形式才可以 true or false
		dump(input('get.id'));//http://www.tp5.com/index/index/vars?id=1  ?这种形式才可以 获取id 的值
		dump(input('id'));//支持patchinfo的获取
	}
	#过滤
	public function guolu(Request $request){
		//$request->filter("htmlspecialchars");//过滤
		//$request->filter("addslashes");//过滤
		$request->filter(["htmlspecialchars","addslashes"]);//多种过滤
		echo Request::instance()->param('username','','strip_tags,strtolower');
		dump(input('post.'));
		dump(input('post.username/d'));//必须是数字 强制转换整型 还有其他类型 参见手册
	}
	#判断
	public function panduan(Request $request){
		dump($request->isAjax());
		dump($request->isMobile());
	}
	
	#参数绑定
	public function bangding($id,$name,$passwd='')//可以设置默认值
	{
		//dump(input('id'));
		//dump(input('name'));
		dump($id);
		dump($name);
		dump($passwd);
	}
	public function dbtest(){
		$lists = Db::table('snake_user')->select();
		print_r($lists);
	}
	public function dbselect(){
		//使用方法查询集合
		$DB = new Db();
		$lists = $DB::table('snake_user')->select();
		dump($lists);
		//使用SQL语句查询集合
		$lists = $DB::query("SELECT * FROM snake_user WHERE 1 = 1");
		echo "<hr>";
		dump($lists);
		echo "<hr>";
		
		
		#连接别的数据库 使用数组
		$DB2 = Db::connect([
			// 数据库类型
			'type'            => 'mysql',
			// 服务器地址
			'hostname'        => '127.0.0.1',
			// 数据库名
			'database'        => 'ly',
			// 用户名
			'username'        => 'root',
			// 密码
			'password'        => 'ma',
			// 端口
			'hostport'        => '',
		]);
		$lists = $DB2->table('ad_a_prizes')->select();
		dump($lists);
		echo "<hr>";
		$lists = $DB2->query("SELECT * FROM ad_a_prizes WHERE pid = 1");
		dump($lists);
		#连接其他数据库 使用字符串
		$DB3 = Db::connect("mysql://root:ma@127.0.0.1:3306/ly");
		$lists = $DB3->table('ad_a_prizes')->select();
		dump($lists);
		echo "<hr>";
	}
	
	public function dbselect2(){
		#使用模型连接数据库
		$prize = new \app\index\model\prizes();
		//dump($prize::all());
		dump($prize::get(1)->toArray());
	}
	
	public function get(){
		#调用静态方法
		$ma = Prizes::get(1);//需要顶部先导入 Prizes 的模型类
		dump($ma->toArray());
		
		#模型的实例化
		$prize = new Prizes();
		$ma = $prize->get(2);
		dump($ma->toArray());
		
		#使loader类
		$prize1 = Loader::model('prizes');
		$ma = $prize1::get(3);
		dump($ma->toArray());
		
		#使用助手函数
		$prize2 = model('prizes');
		$ma = $prize2::get(4);
		dump($ma->toArray());
	}
	//模型 获取单条数据
	public function getOne(){
		$ma = Prizes::get(["nums"=>18]);
		dump($ma->toArray());
		#使用闭包查询
		$res = Prizes::get(function ($query){
			$query->where("pid",6);
		});
		dump($res->toArray());
		#find 方法
		$res2 = Prizes::where("pid",5)->find();
		dump($res2->toArray());
	}
	public function getAll(){
		//all
		//$res = Prizes::all();
//		$res = Prizes::all("1,3,3");
//		$res = Prizes::all([1,2,3,4]);
//		$res = Prizes::all("1,3,3");
		/*$res = Prizes::all(function($query){
			$query->where('pid','>',1);
		});*/
		$res = Prizes::where("pid",'>',2)->select();
		foreach ($res as $key=>$val){
			dump($val->toArray());
		}
	}
	public function getValue(){
		$res = Prizes::where("pid",'>',3)->value("title");//获取一条记录
		dump($res);
		//获取列值
		$res2 = Prizes::column("title");
		dump($res2);
	}
	//动态查询
	public function dong(){
		$res = Prizes::getByTitle('华为PAD 1台');////获取一条记录
		dump($res->toArray());

	}
	
	public function add2(){
		$prize = new Prizes();
		//通过属性
		/*$prize->title = 'test';
		$prize->nums = 1;
		$prize->dateline = '1528182003';*/
		
		//通过data方法
		/*$prize->data([
			'title' => 'test2',
			'nums' =>2,
			'dateline' => '1528182003',
		]);*/
		
		//dump($prize->save());
		//实例化的时候
		/*$prize2 = new Prizes([
			'title' => 'test3',
			'nums' =>2,
			'dateline' => '1528182003',
			'xx' => '1528182003',
		]);
		//dump($prize2->save());
		dump($prize2->allowField(true)->save());//屏蔽掉不存在的字段
		echo $prize2->pid;//获取增加的pid*/
		
		//不要再同一个实例中多次新增数据,如果确实需要要下面这样操作
		/*$prize->title = 'test5';
		$prize->nums = 1;
		$prize->dateline = '1528182003';
		$prize->save();
		$prize->title = 'test6';
		$prize->nums = 1;
		$prize->dateline = '1528182003';
		$prize->isUpdate(false)->save();*/
		
		//添加多条数据
		/*$lists = [
			['title' => 'test21', 'nums' =>2, 'dateline' => '1528182003',],
			['title' => 'test22', 'nums' =>2, 'dateline' => '1528182003',],
			['title' => 'test23', 'nums' =>2, 'dateline' => '1528182003',],
		];
		$prize->saveAll($lists);*/
		
		//creat方法
		/*$p = Prizes::create([
			'title' => 'test212', 'nums' =>2, 'dateline' => '1528182003',
		]);
		dump($p);*/
		$prize->title = 'test999';
		$prize->nums = 1;
		$res = $prize->save();
		dump($res);
		
	}
	public function delete2(){
		//删除数据
		/*$prize = Prizes::get(21);
		dump($prize->delete());*/
		//删除主键
		//$prize = Prizes::destroy(22);
		//$prize = Prizes::destroy('18,19');
		//删除其他
		//$prize = Prizes::destroy(['nums'=>2000]);
		//使用闭包删除
		$prize = Prizes::destroy(function ($query){
			$query->where("pid",'>',12);
		});
		dump($prize);
	}
	public function update(){
		#通过设置属性更新
	/*	$prize = Prizes::get(8);
		$prize->hadnums = 1000;
		$res = $prize->save();
		dump($res);*/
	
		//直接数组修改
		/*$pirze = new Prizes();
		$res = $pirze->save(['hadnums'=>2000],['pid'=>8]);
		dump($res);*/
		
		$info['title'] = 'test888';
		$info['nums'] = 1000;
		$info['asd'] = 1;//不存在的字段
		$pirze = new Prizes();
		//$res = $pirze->allowField(true)->save($info,['pid'=>8]);
		$res = $pirze->allowField(['title','nums'])->save($info,['pid'=>8]);
		dump($res);
		//还可以使用update更新
		
	}
	public function tongji(){
		$total = Prizes::count();
		dump($total);
		$total2 = Prizes::where('pid','>',7)->count();
		dump($total2);
		$max = Prizes::max('hadnums');
		var_dump($max);
	}
	public function getGender(){
		$pirze = Prizes::get(12);
		dump($pirze->toArray());//toArray 会经过获取器的修改 在model/Prizes
		dump($pirze->getData());//不经过获取器处理
	}
	public function updatePass(){
		$prize = Prizes::get(8);
		$prize->pass = '123456';//会经过修改器 加密
		$res = $prize->save();
		dump($res);
	}
	#软删除
	public function softDelete(){
		/*$res = Prizes::destroy(29);
		//$res = Prizes::destroy(29,true);//加true 直接删除 不是软删除了
		dump($res);
		*/
		/*$ma = Prizes::get(29);//软删除后 get获取不到
		dump($ma);*/
		//读取软删除数据
		$res = Prizes::withTrashed()->find(29);
		dump($res->toArray());
		
		//仅读取软删除的数据
		$lists = Prizes::onlyTrashed()->select();
		foreach ($lists as $k=>$v){
			dump($v->toArray());
		}
	}
	
	public function tags(){
		$this->assign('str','tp5');
		$rows = [
			'name'	=> '123',
			'age'	=> '12',
			'class'	=> '1',
		];
		$lists = [
			['name' => 123,'age'=>1,'class'=>1],
			['name' => 1234,'age'=>2,'class'=>2],
			['name' => 12345,'age'=>21,'class'=>21],
		];
		$t = time();
		$this->assign('t',$t);
		$this->assign('r',$rows);
		return $this->fetch();
	}
	//layout
	public function layout(){
		return $this->fetch('layouttest');
	}
	//模板继承
	public function block(){
		return $this->fetch('blocktest');
	}
	//内置标签
	public function tpls(){
		$lists = [
			['name' => 123,'age'=>1,'class'=>1],
			['name' => 1234,'age'=>2,'class'=>2],
			['name' => 12345,'age'=>21,'class'=>21],
			['name' => 123456,'age'=>212,'class'=>21],
		];
		foreach ($lists as $k1=>&$v1){
			$v1['type'] = 1;
		}
		dump($lists);
		
		$this->assign('data',$lists);
		$this->assign('ma',10);
		$this->assign('ma1',10);
		$this->assign('week',date('w'));
		return $this->fetch();
	}
	public function yzm(){
		//$captcha = new Captcha();
		//return $captcha->entry(1);
		return $this->fetch();
	}
	public function yzq(){
		/*$validate = new Validate([
			'name' => 'require|max:6',
			'email' =>'require|email',
			'password' =>'require|length:6,12|confirm:repassword',
		],[
			"name.require"=>'用户名不存在',
				"name.length"=>'长度不满足',
			]
		
		);*/
		/*if(!captcha_check($captcha)){
			//验证失败
		};
		*/
		$validate = new Validate([
			'captcha|验证码'=>'require|captcha'
		]);
		$info['captcha'] = input('captcha');
		//$info['name'] = input('name');
		//$info['email'] = input('email');
		if(!$validate->check($info)){
			dump($validate->getError());
		}
	}
	
	public function img(){
		$image = \think\Image::open('./uploads/11/03f729587ee2ac44d28e1384690ca4.jpg');
		dump($image);
		#裁剪
		//$image->crop(100,100)->save('./uploads/11/t_100.jpg');
		//$image->crop(100,100,200,200)->save('./uploads/11/t_1.jpg');
		//$image->thumb(200,200)->save('./uploads/11/t_2.jpg');//不一定是200*200
		//$image->thumb(200,200,\think\Image::THUMB_CENTER)->save('./uploads/11/t_2.jpg');//生成200*200 居中裁剪
		//$image->thumb(200,200,3)->save('./uploads/11/t_2.jpg');//生成200*200 居中裁剪 \think\Image::THUMB_CENTER= 3
		
		//旋转 默认以X旋转
		//$image->flip()->save('./uploads/11/t_x.jpg');
		//$image->flip(\think\Image::FLIP_Y)->save('./uploads/11/t_y.jpg');
		//$image->rotate()->save('./uploads/11/t_90.jpg',NULL,100);//默认90度
		$image->rotate(180)->save('./uploads/11/t_180.jpg',NULL,100);//默认90度
	}
	public function water(){
		$image = \think\Image::open('./uploads/11/03f729587ee2ac44d28e1384690ca4.jpg');
		//$image->water('./uploads/11/t_100.jpg',2)->save('./uploads/11/t_water.jpg');
		$image->text('HELLO WORLD','arial.ttf',20,'#ffffff')->save('./uploads/11/t_text.jpg');
	}

	public function files(){
		
		/*$file = new \SplFileObject('./robots.txt'); //注意， robots.txt 这个是必须要传的。
		
		echo $file->getSize(); //文件大小
		echo "\n";
		echo $file->current(); //输出robots.txt里的第一行内容。
		echo "\n";*/
		
		$file = new \think\File('./robots.txt');
		echo $file->getSize(); //文件大小
		echo "\n";
		echo $file->current(); //输出robots.txt里的第一行内容。
		echo "\n";
		echo md5_(1234);
	}
	
}


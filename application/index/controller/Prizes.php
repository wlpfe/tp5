<?php
	namespace app\index\controller;
	use think\Controller;
	use think\Db;
	use think\image\Exception;
	
	class Prizes extends Controller{
		protected $DB;

		public function _initialize()
		{
			parent::_initialize(); // TODO: Change the autogenerated stub
			$this->DB = Db::connect([
				// 数据库类型
				'type'            => 'mysql',
				// 服务器地址
				'hostname'        => '127.0.0.1',
				// 数据库名
				'database'        => 'ly',
				// 用户名
				'username'        => 'root',
				// 密码
				'password'        => 'ma',
				// 端口
				'hostport'        => '',
				'prefix'          => 'ad_a_',
				
			]);
		}
		public function select()
		{
			/*
			$lists = $this->DB->table('ad_a_prizes')->select();
			dump($lists);
			echo "<hr>";
			$lists2 = $this->DB->query("SELECT * FROM ad_a_prizes WHERE pid = 1");
			dump($lists2);
			echo "<hr>";
			$lists3 = $this->DB->query("SELECT * FROM ad_a_prizes WHERE pid >=? AND pid <= ?",[1,3]);
			dump($lists3);
			echo "<hr>";
			//获取最后执行的SQL
			echo $this->DB->getLastSql();*/
			/*
			echo "<hr>";
			#//查询一条
			$one = $this->DB->table('ad_a_prizes')->find();
			dump($one);
			echo "<hr>";
			$one = $this->DB->name('prizes')->find();
			dump($one);
			echo "<hr>";
			//name 方法  用name 会自动加上前缀
			$lists = Db::name('chatuser')->select();
			dump($lists);
			echo "<br><br><br><br><hr>";
			//使用db函数 会自动加前缀
			$two = db('chatuser')->select();
			dump($two);*/
			
			//条件匹配 find 查询单个
			/*
			$one = $this->DB->name('prizes')->where("pid",'=',"2")->find();
			dump($one);
			echo "<hr>";
			//select 集合
			$ones = $this->DB->name('prizes')->where("pid",'=',"2")->select();
			dump($ones);
			echo "<hr>";
			$lists = Db::name('chatuser')->where("username","like","%马%")->select();
			dump($lists);
			echo "<hr>";
			$lists = Db::name('chatuser')->where("username","like","%马%")->where("groupid","=","2")->select();
			dump($lists);
			echo "<hr>";
			$lists = Db::name('chatuser')->where("username","like","%马%")->where("groupid","=","2")->whereOr("id","=",1)->select();
			dump($lists);
			dump(Db::getLastSql());
			*/
			//LIMIT ORDER
			$lists = Db::name('chatuser')->field('id,username')->where("groupid","=","2")->limit(5)->order("id","ASC")->order("username","DESC")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			$lists = Db::name('chatuser')->field("COUNT(*) AS A")->where("groupid = 2")->find();
			dump($lists);
			dump($lists['A']);
			dump(Db::getLastSql());
			echo "<hr>";
			
			#WHERE 写成字符串查询
			$lists = Db::name('chatuser')->field('id,username')->where("groupid = 2 AND id = 1")->limit(5)->order("id","ASC")->order("username","DESC")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			#page 使用
			$lists = Db::name("chatuser")->page("2,2")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			
			#group 使用
			$lists = Db::name('chatuser')->field("groupid,count(*) as A")->group("groupid")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			
			#having结合group使用
			$lists = Db::name('chatuser')->field("groupid,count(*) as A")->group("groupid")->having("A >= 2")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			
		}
		public function select2(){
			#多表联查
			$lists = Db::table("snake_chatuser")->field("snake_chatuser.*,snake_chatlog.content")->join("snake_chatlog","snake_chatuser.id = snake_chatlog.toid")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			$lists = Db::table("snake_chatuser u")->field("u.*,l.content")->join("snake_chatlog l","u.id = l.toid")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			
			//左链接
			$lists = Db::table("snake_chatuser u")->field("u.*,l.content")->join("snake_chatlog l","u.id = l.toid","LEFT")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			
			//右链接
			$lists = Db::table("snake_chatuser u")->field("u.*,l.content")->join("snake_chatlog l","u.id = l.toid","RIGHT")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
			
			//别名
			
			$lists = Db::table("snake_chatuser")->alias('u')->field("u.*,l.content")->join("snake_chatlog l","u.id = l.toid")->select();
			dump($lists);
			dump(Db::getLastSql());
			echo "<hr>";
		}
		public function select3(){
			$id = input("id/get");
			echo $id;
			
			//绑定
			$one = Db::table('user')->where("uid","=",":id")->bind(["id"=>[$id,\PDO::PARAM_INT]])->find();
			dump($one);
			//总数
			$one = Db::table('user')->where("uid","=",6)->count();
			dump($one);
			//求和
			$one = Db::table('user')->where("uid","=",6)->sum('uid');
			dump($one);
			//时间查询 whereTime 查询
			$two = Db::table('user')->whereTime("creattime",'y')->count();
			dump($two);
			dump(Db::getLastSql());
		}
		
		/**
		 * @return array
		 */
		public function select4()
		{
			//视图查询
			/*$lists = Db::view('chatuser','id,username,sign')->view('chatlog','content',"chatuser.id = chatlog.fromid")->select();
			dump($lists);
			dump(Db::getLastSql());*/
			//左连接
			$lists = Db::view('chatuser','id,username,sign')->view('chatlog','content',"chatuser.id = chatlog.fromid","left")->order('chatuser.id ASC')->limit(2)->select();
			dump($lists);
			dump(Db::getLastSql());
		}
		public function add(){
			//$ma = $this->DB->execute("INSERT INTO ad_a_prizes (title,nums) VALUES ('TEST',100)");
			//$ma = $this->DB->execute("INSERT INTO ad_a_share VALUES (?,?,?,?)",[NULL,1,'127.0.0.1',150000000]);
			$ma = $this->DB->execute("INSERT INTO ad_a_share VALUES (null,:uid,:ip,:time)",['uid'=>1,'ip'=>'127.0.0.1','time'=>150000000]);
			dump($ma);//影响的行数
		}
		public function delete(){
			//$ma = $this->DB->execute("DELETE FROM ad_a_share WHERE uid = 1");
			/*$ma = Db::table('user')->where("uid",2)->delete();
			dump($ma);*/
			//如果是主键可以直接写在delete里面
			$ma = Db::table('user')->delete(7);
			dump($ma);
			dump(Db::getLastSql());
		}
		public function update(){
			$ma = $this->DB->execute("UPDATE ad_a_share SET uid = 2 WHERE uid = 1");
			dump($ma);
			dump(Db::getLastSql());
		}
		
		public function add2(){
			/*
			$data = ['name'=>'mxw','pwd'=>'123456'];
			$ma = Db::table('user')->insert($data);
			dump($ma);*/
			/*
			//插入多条数据
			$data = [
				['name'=>'mxw1','pwd'=>'123456'],
				['name'=>'mxw2','pwd'=>'123456'],
			];
			$ma = Db::table('user')->insertAll($data);
			dump($ma);
			
			//获取最后插入的id
			$data1 = ['name'=>'mxw12321','pwd'=>'123451236'];
			$last_id = Db::table('user')->insertGetId($data1);
			dump($last_id);
			dump(Db::table('uer')->getLastInsID());//这个是直接获取
			*/
			
		}
		
		public function update2()
		{
			$ma = Db::table('user')->where("uid",2)->update(["name"=>'mxmxw']);
			dump($ma);
			dump(Db::getLastSql());
			
			$ma = Db::table('user')->update(["name"=>'mxmxw',"uid"=>6]);//主键可以写在里面
			dump($ma);
			dump(Db::getLastSql());
			
			
			/*$ma = Db::table('user')->where("uid",6)->setField("age",10);
			dump($ma);
			dump(Db::getLastSql());*/
			
			//自增
/*			$ma = Db::table('user')->where("uid",6)->setInc("age");
			dump($ma);
			dump(Db::getLastSql());*/
			//自减
			/*$ma = Db::table('user')->where("uid",6)->setDec("age");
			dump($ma);
			dump(Db::getLastSql());*/
			
			$ma = Db::table('user')->where("uid",6)->setInc("age",3);
			dump($ma);
			dump(Db::getLastSql());
			
		}
		#事务机制
		public function shiwu(){
			//自动控制事务,一般很少用
			/*Db::transaction(function (){
				Db::table('user')->where('uid',9)->delete();
				Db::table('user_news')->where('buid',8)->delete();//故意写错验证
			});*/
			
			//手动事务
			Db::startTrans();
			try{
				if(!Db::table('user')->where('uid',11)->delete()){
					//throw new \Exception("error11");
					exit('error1');
				}
				if(!Db::table('user_news')->where('uid',8)->delete()){
					//throw new \Exception("error22");
					exit('error2');
				}
				Db::commit();
				echo 'sucessful';
			}catch (\Exception $e){
				echo 'rollback';
				dump($e->getMessage());
				Db::rollback();
			}
		}
	}
?>